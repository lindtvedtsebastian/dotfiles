#+title: Emacs configuration
* Config
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/new_init.el
:END:

** Package management
Old package management
#+BEGIN_SRC emacs-lisp :tangle no
  ;; Package management

  ;; Initialize Package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
 
  (require 'use-package)
#+END_SRC

** General purpose configurations
#+BEGIN_SRC emacs-lisp
  ;; General UI configurations

  (setq inhibit-startup-message t) ;; Hide startup message
  (setq inhibit-startup-screen t) ;; Hide startup screen

  (scroll-bar-mode 1) 	;; Enable visible scrollbar
  (tool-bar-mode -1)	    ;; Disable the toolbar
  (tooltip-mode -1)	    ;; Disable tooltips
  (set-fringe-mode 10)	;; Set fringe size
  (electric-pair-mode 1)  ;; Auto pair characters

  ;; Setup visible bell
  (setq visible-bell t)

  ;; Set the font
  (set-face-attribute 'default nil :font "Iosevka" :height 100)

  ;; Set line number mode to be relative
  (setq display-line-numbers-type 'relative)

  ;; Add line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Improve scrolling
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) 	;; Scroll 1 line at a time
  (setq mouse-wheel-progressive-speed nil) 		;; Disable scroll acceleration

  ;; Set coding system
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)

  ;; Set custom file location
  (customize-save-variable 'custom-file "~/.emacs.d/custom.el")
  (load custom-file)

  ;; Set custom theme folder location
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

  ;; Customize TAB behaviour
  (setq-default tab-width 4)

  ;; Modify backup folder
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))

  ;; Enable Dired navigation with a
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Set window size
  (add-to-list 'default-frame-alist '(height . 80))
  (add-to-list 'default-frame-alist '(width . 300))
#+END_SRC
** Git
#+BEGIN_SRC emacs-lisp 
;; Add magit
(use-package magit
  :ensure t)

(use-package forge
  :ensure t
  :after magit)
#+END_SRC

** E(vi)l mode
#+BEGIN_SRC emacs-lisp
 ;; Add and initialize Evil mode
(defun sl/evil-hook ()
  (dolist (mode '(custom-mode
                  eshell-mode
                  git-rebase-mode
                  sauron-mode
                  term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (evil-mode 1)
  :hook (evil-mode . sl/evil-hook)
  :config
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))


(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))

;; Undo tree
(use-package undo-tree
  :ensure t
  :after evil
  :diminish
  :config
  (evil-set-undo-system 'undo-tree)
  (global-undo-tree-mode 1))
#+END_SRC

** Ligatures
#+BEGIN_SRC emacs-lisp
  
    ;; Add Ligatures
  (use-package ligature
    :ensure nil
    :load-path "~/.emacs.d/ligature.el"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<====> ""<!--" "####" "~~>" "***" "||=" "||>"":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!==""!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<" "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->" "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
  
    (global-ligature-mode t))
  
#+END_SRC 

** QoL
#+BEGIN_SRC emacs-lisp
  ;; Diminish bloated modes
  (use-package diminish
    :ensure t)

  (use-package swiper
    :ensure t)

  ;; Ivy
  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  ;; Extending Ivy functionality
  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1))

  ;; Counsel
  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))


  ;; Helpful
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  ;; Which key
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0))

  #+END_SRC

** Language server protocol (LSP)
#+BEGIN_SRC emacs-lisp
  
;; LSP-mode
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook
  (prog-mode . lsp)
  :config
  (lsp-enable-which-key-integration t))

(setq gc-cons-threshold (* 100 1024 1024)) ;; 100mb
(setq read-process-output-max (* 10 1024 1024)) ;; 10mb
(setq lsp-file-watch-threshold 3000) ;; Watch 3000 folders max

(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode)
  :init
  (setq lsp-ui-sideline-show-hover t))

(use-package company
  :ensure t
  :hook (lsp-mode . company-mode)
  :hook (emacs-lisp-mode . company-mode)
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0)
  (company-selection-wrap-around t))
#+END_SRC

** Languages
*** Web
#+BEGIN_SRC emacs-lisp
      ;; npm-mode
      (use-package npm-mode
        :ensure t)

      ;; Web mode
      (use-package web-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))

        (setq web-mode-markup-indent-offset 4)
        (setq web-mode-css-indent-offset 4)
        (setq web-mode-code-indent-offset 4))
 
      ;; emmet mode
      (use-package emmet-mode
        :ensure t
        :hook web-mode) 


#+END_SRC
*** Java
#+BEGIN_SRC emacs-lisp
  (setenv "JAVA_HOME" "/Users/sebastian/Library/Java/JavaVirtualMachines/corretto-17.0.4/Contents/Home")
  (setq lsp-java-java-path "/Users/sebastian/Library/Java/JavaVirtualMachines/corretto-17.0.4/Contents/Home/bin/java")
  (use-package lsp-java
    :ensure t)
#+END_SRC
