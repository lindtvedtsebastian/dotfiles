#+title: Emacs configuration
* Config
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/init.el
:END:
** Package management
Old package management
#+begin_src emacs-lisp :tangle no
  ;; Package management

  ;; Initialize Package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
 
  (require 'use-package)
#+end_src

New (currently in use) package management

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
  (setq package-enable-at-startup nil)
#+end_src

** Path
#+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :config (exec-path-from-shell-initialize))
#+end_src

** User interface
*** General purpose configurations
#+begin_src emacs-lisp
  ;; General UI configurations

  (setq inhibit-startup-message t) ;; Hide startup message
  (setq inhibit-startup-screen t) ;; Hide startup screen

  (tool-bar-mode -1)	    ;; Disable the toolbar
  (tooltip-mode -1)	    ;; Disable tooltips
  (set-fringe-mode 10)	;; Set fringe size
  (electric-pair-mode 1)  ;; Auto pair characters
  
  ;; some scrolling settings
  (scroll-bar-mode -1) 	;; Disable visible scrollbar
  (pixel-scroll-precision-mode t)
  (setq pixel-scroll-precision-large-scroll-height 40.0)
  (setq pixel-scroll-precision-interpolation-factor 30)


  ;; Setup visible bell
  (setq visible-bell t)

  ;; Set the font
  (set-face-attribute 'default nil :font "Iosevka" :height 140)

  ;; Set line number mode to be relative
  (setq display-line-numbers-type 'relative)

  ;; Add line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Improve scrolling
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) 	;; Scroll 1 line at a time
  (setq mouse-wheel-progressive-speed nil) 		;; Disable scroll acceleration

  ;; Set coding system
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)

  ;; Set custom file location
  (customize-save-variable 'custom-file "~/.emacs.d/custom.el")
  (load custom-file)

  ;; Set custom theme folder location
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

  ;; Customize TAB behaviour
  (setq-default tab-width 4)

  ;; Modify backup folder
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))

  ;; Enable Dired navigation with a
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Set window size
  (add-to-list 'default-frame-alist '(height . 80))
  (add-to-list 'default-frame-alist '(width . 300))

  ;; Startup timer
  (add-to-list 'after-init-hook
               (lambda ()
                 (message "Emacs loaded in %s with %d garbage collections."
                          (format "%.2f seconds"
                                  (float-time
                                   (time-subtract (current-time) before-init-time)))
                          gcs-done)))
#+end_src

*** Set theme
#+begin_src emacs-lisp
(load-theme 'chalk t)
#+end_src

*** Rainbow mode
#+begin_src emacs-lisp
(use-package rainbow-mode)
#+end_src

*** Treemacs
#+begin_src emacs-lisp
          (use-package treemacs
            :config
            (treemacs-follow-mode t))

          (use-package treemacs-evil
            :requires treemacs
            :after (treemacs evil))
#+end_src

*** Adjust parenthesis/bracket/brace highlighting duration
#+begin_src emacs-lisp
  (use-package paren
    :straight nil
    :init
    (setq show-paren-delay 0)
    )
#+end_src

*** Ligatures
#+begin_src emacs-lisp
    ;; Add Ligatures
  (use-package ligature
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<====> ""<!--" "####" "~~>" "***" "||=" "||>"":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!==""!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<" "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->" "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
  
    (global-ligature-mode t))
  
#+end_src 

*** Diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** Git
#+begin_src emacs-lisp 
  ;; Add magit
  (use-package magit)

  (use-package forge
    :after magit
    :init
    (setq forge-add-default-bindings nil))
#+end_src

** QoL
#+begin_src emacs-lisp
  (use-package swiper)

  ;; Ivy
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  ;; Counsel
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  ;; Extending Ivy functionality
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  ;; Helpful
  (use-package helpful

    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  ;; Which key
  (use-package which-key

    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0))

  #+end_src
  
*** Undo-tree

#+begin_src emacs-lisp

    ;; Define undo-tree directory
    (defvar undo-history-dir (concat user-emacs-directory "undo/")
      "Directory to save undo history files to")

    ;; Create dir if not exists
    (unless (file-exists-p undo-history-dir)
      (make-directory undo-history-dir t))

    ;; Undo tree
    (use-package undo-tree
      :after evil
      :diminish
      :config
      (evil-set-undo-system 'undo-tree)
      (global-undo-tree-mode 1)
      (setq undo-tree-history-directory-alist `(("." . ,undo-history-dir))))

#+end_src

** Projectile
#+begin_src emacs-lisp
      (use-package projectile
        :config
        (projectile-mode +1))
#+end_src

** Development 
*** Language server protocol (LSP)
#+begin_src emacs-lisp
  ;; LSP-mode
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-completion-provider :none)
    :hook (sh-mode . lsp-deferred)
    :config
    (lsp-enable-which-key-integration t)
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection '("terraform-ls" "serve"))
                      :major-modes '(terraform-mode)
                      :server-id 'terraform-ls)))

  (setq gc-cons-threshold (* 8 1024 1024)) ;; 8mb
  (setq read-process-output-max (* 8 1024 1024)) ;; 8mb
  (setq lsp-file-watch-threshold 3000) ;; Watch 3000 folders max
  (setq max-lisp-eval-depth 10000) ;; set max eval depth

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :init
    (setq lsp-ui-sideline-show-hover t))

#+end_src

*** Company
#+begin_src emacs-lisp

  (use-package company
    :hook ((lsp-mode . company-mode)
           (emacs-lisp-mode . company-mode))
    :init
    (setq company-backends '((company-files company-keywords company-capf company-dabbrev-code company-etags company-dapprev)))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (company-selection-wrap-around t))

#+end_src

*** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode t))
#+end_src

*** eglot
#+begin_src emacs-lisp
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs '(terraform-mode . ("terraform-ls" "serve"))))
#+end_src

*** Languages
**** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode t))
#+end_src

**** Web
#+begin_src emacs-lisp
  ;; npm-mode
  (use-package npm-mode
    )

  ;; Web mode
  (use-package web-mode
    :hook (web-mode . lsp-deferred)
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.ts?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))

    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-css-indent-offset 4)
    (setq web-mode-code-indent-offset 4))

  ;; emmet mode
  (use-package emmet-mode
    :hook (web-mode . emmet-mode)) 


#+end_src

**** Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :hook (java-mode . lsp-deferred)
    :config
    (add-to-list 'auto-mode-alist '("\\.java?\\'" . java-mode)))
#+end_src

**** Terraform
#+begin_src emacs-lisp

  (use-package terraform-mode
    :hook (terraform-mode . lsp-deferred)
    :hook (terraform-mode . terraform-format-on-save-mode)
    :config
    (add-to-list 'auto-mode-alist '("\\.tf\\'" . terraform-mode)))

#+end_src

**** Python
#+begin_src emacs-lisp
  (use-package python
    :hook
    (python-mode . lsp-deferred))
#+end_src

** Keybindings
*** E(vi)l mode
#+begin_src emacs-lisp
   ;; Add and initialize Evil mode
  (defun sl/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (evil-mode 1)
    :hook (evil-mode . sl/evil-hook)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))


  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :diminish
    :config (evil-commentary-mode t))
#+end_src

*** General
#+begin_src emacs-lisp
    (use-package general
      :config
      (general-create-definer ls/leader-keys
                              :keymaps '(normal insert visual emacs)
                              :prefix "SPC"
                              :global-prefix "C-SPC"))
#+end_src

*** Leader keys
#+begin_src emacs-lisp
      (ls/leader-keys
        "p" '(:ignore t :which-key "Projectile")
        "pr" '(projectile-run-project :which-key "Run the current projectile project")
        "pf" '(projectile--find-file :which-key "Projectile find file")
        "pF" '(projectile-find-file-other-window :which-key "Projectile find file new window"))
#+end_src

** Org-mode

*** Font setup

Define some font sizes for different types of headings

#+begin_src emacs-lisp
  (defun sl/org-font-setup ()
  ;; Set some faces for org heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.0)))
    (set-face-attribute (car face) nil :weight 'regular :height (cdr face))))
#+end_src

*** Org-mode hook
Common actions to perform when org-mode starts

#+begin_src emacs-lisp
  (defun sl/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 0)
    (visual-line-mode 1))
#+end_src

*** Org package
The actual org-mode package

#+begin_src emacs-lisp
  
(use-package org
  :hook (org-mode . sl/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")

  (sl/org-font-setup)
  (advice-add 'org-refile :after #'org-save-all-org-buffers)

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-src-tab-acts-natively t)
  (setq org-startup-with-inline-images t)
  (setq org-src-tab-acts-natively t)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "IN PROGRESS(p)" "|" "DONE(d!)")
          (sequence "BACKLOG(b)" "ACTIVE(a)" "|" "REVIEW(r)" "FINISHED(f)" "CANCELLED(c)"))))

#+end_src

*** Org-bullets and visual-fill-mode
Some visual modifications and visual fill column mode

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun sl/org-mode-visual-fill ()
    (setq visual-fill-column-width 250
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . sl/org-mode-visual-fill))

#+end_src

*** Org-tempo
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("kt" . "src kotlin"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))

#+end_src


* Themes
** Chalk
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/themes/chalk-theme.el
:END:
#+begin_src emacs-lisp
      (deftheme chalk
        "A light theme inspired by chalk colors, created by Sebastian Lindtvedt")

      (defgroup chalk-palette nil
        "Light chalk color palette")

      (defcustom chalk-foreground "#37474f"
        "Default foreground color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-background "#ffffff"
        "Default background color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-highlight "#eaeaea"
        "Default highlight color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-blue "#bbe0f2"
        "Default blue color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-yellow "#f2eda1"
        "Default yellow color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-brightyellow "#FFFFEA"
        "A bright yellow color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-red "#ff5a5f"
        "Default red color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-orange "#feab91"
        "Default orange color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-green "#b3e1d0"
        "Default green color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-purple "#6b3fb8"
        "Default purple color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-lightgrey "#c2cdd2"
        "Default light grey color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-verylightgrey "#eceff1"
        "Default very light grey color"
        :type 'color :group 'chalk-palette)

      (defcustom chalk-darkgrey "#232323"
        "Default dark grey color"
        :type 'color :group 'chalk-palette)

      (custom-theme-set-faces 'chalk
                              `(default ((t (:foreground ,chalk-foreground :background ,chalk-background))))
                              `(cursor ((t (:foreground ,chalk-background :background ,chalk-foreground))))
                              `(mouse ((t (:foreground ,chalk-foreground :background ,chalk-background))))
                              `(scroll-bar ((t (:foreground ,chalk-foreground :background ,chalk-background))))
                              `(mode-line ((t (:foreground ,chalk-background :background ,chalk-foreground))))
                              `(font-lock-keyword-face ((t (:foreground ,chalk-orange :weight bold))))
                              `(font-lock-variable-name-face ((t (:foreground ,chalk-purple))))
                              `(font-lock-comment-face ((t (:foreground ,chalk-darkgrey))))
                              `(org-block ((t (:background ,chalk-verylightgrey))))
                              `(org-block-begin-line ((t (:foreground ,chalk-foreground :background ,chalk-lightgrey))))
                              `(org-block-end-line ((t (:foreground ,chalk-foreground :background ,chalk-lightgrey))))
                              )

      (provide-theme 'chalk)
#+end_src

** 

