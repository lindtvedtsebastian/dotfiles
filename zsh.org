#+title: ZSH Configuration
* zenv
:PROPERTIES:
:header-args: :tangle ~/.zshenv
:END:

Prepend path to emacs to path

#+BEGIN_SRC sh
  export XDG_CONFIG_HOME="$HOME/.config"
  export XDG_DATA_HOME="$XDG_CONFIG_HOME/local/share"
  export XDG_CACHE_HOME="$XDG_CONFIG_HOME/cache"

  export EDITOR="emacs"
  export VISUAL="emacs"

  export ZDOTDIR="$XDG_CONFIG_HOME/zsh" # Zsh folder
  export HISTFILE="$ZDOTDIR/.zhistory" # History filepath
  export HISTSIZE=10000 # Maximum events for internal history
  export SAVEHIST=10000 # Maximum events in history file

  # prepend emacs to path
  PATH=$HOME/git/emacs/src:$PATH
#+END_SRC 

* zprofile
:PROPERTIES:
:header-args: :tangle ~/.config/zsh/.zprofile
:END:

#+BEGIN_SRC sh
#+END_SRC

* zshrc
:PROPERTIES:
:header-args: :tangle ~/.config/zsh/.zshrc
:END:

Set Java to 11 by default

#+BEGIN_SRC sh

  # Initialize autocomplete
  autoload -U compinit; compinit

  _comp_options+=(globdots) # With hidden files

  fpath=($ZDOTDIR $fpath)
  autoload -Uz prompt.zsh; prompt.zsh

  eval "$(/opt/homebrew/bin/brew shellenv)"

  export JAVA_11_HOME=$(/usr/libexec/java_home -v11)

  alias java11='export JAVA_HOME=$JAVA_11_HOME'

  # default to Java 11
  java11

#+END_SRC

* zlogin
:PROPERTIES:
:header-args: :tangle ~/.config/zsh/.zlogin
:END:

#+BEGIN_SRC sh
#+END_SRC

* zlogout
:PROPERTIES:
:header-args: :tangle ~/.config/zsh/.zlogout
:END:

#+BEGIN_SRC sh
#+END_SRC


* prompt
:PROPERTIES:
:header-args: :tangle ~/.config/zsh/prompt.zsh
:END:

#+begin_src shell
  # prompt:
  # %F => color dict
  # %f => reset color
  # %~ => current path
  # %* => time
  # %n => username
  # %m => shortname host
  # %(?..) => prompt conditional - %(condition.true.false)

  # Display git status
  # TODO to refactor with switch / using someting else than grep
  # Might be faster using ripgrep too
  git_prompt_status() {
      local INDEX STATUS

      INDEX=$(command git status --porcelain -b 2> /dev/null)

      STATUS=""

      if $(echo "$INDEX" | command grep -E '^\?\? ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_UNTRACKED$STATUS"
      fi

      if $(echo "$INDEX" | grep '^A  ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
      elif $(echo "$INDEX" | grep '^M  ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
      elif $(echo "$INDEX" | grep '^MM ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
      fi

      if $(echo "$INDEX" | grep '^ M ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
      elif $(echo "$INDEX" | grep '^AM ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
      elif $(echo "$INDEX" | grep '^MM ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
      elif $(echo "$INDEX" | grep '^ T ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
      fi

      if $(echo "$INDEX" | grep '^R  ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_RENAMED$STATUS"
      fi

      if $(echo "$INDEX" | grep '^ D ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
      elif $(echo "$INDEX" | grep '^D  ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
      elif $(echo "$INDEX" | grep '^AD ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
      fi

      if $(command git rev-parse --verify refs/stash >/dev/null 2>&1); then
          STATUS="$ZSH_THEME_GIT_PROMPT_STASHED$STATUS"
      fi

      if $(echo "$INDEX" | grep '^UU ' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_UNMERGED$STATUS"
      fi

      if $(echo "$INDEX" | grep '^## [^ ]\+ .*ahead' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_AHEAD$STATUS"
      fi

      if $(echo "$INDEX" | grep '^## [^ ]\+ .*behind' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_BEHIND$STATUS"
      fi

      if $(echo "$INDEX" | grep '^## [^ ]\+ .*diverged' &> /dev/null); then
          STATUS="$ZSH_THEME_GIT_PROMPT_DIVERGED$STATUS"
      fi

      if [[ ! -z "$STATUS" ]]; then
          echo " [ $STATUS]"
      fi
  }


  prompt_git_branch() {
      autoload -Uz vcs_info 
      precmd_vcs_info() { vcs_info }
      precmd_functions+=( precmd_vcs_info )
      setopt prompt_subst
      zstyle ':vcs_info:git:*' formats '%b'
  }

  prompt_git_info() {
      [ ! -z "$vcs_info_msg_0_" ] && echo "$ZSH_THEME_GIT_PROMPT_PREFIX%F{white}$vcs_info_msg_0_%f$ZSH_THEME_GIT_PROMPT_SUFFIX"
  }

  prompt_purity_precmd() {
      # Pass a line before each prompt
      print -P ''
  }

  prompt_purification_setup() {
      # Display git branch

      autoload -Uz add-zsh-hook
      add-zsh-hook precmd prompt_purity_precmd

      ZSH_THEME_GIT_PROMPT_PREFIX=" %F{red}λ%f:"
      ZSH_THEME_GIT_PROMPT_DIRTY=""
      ZSH_THEME_GIT_PROMPT_CLEAN=""

      ZSH_THEME_GIT_PROMPT_ADDED="%F{green}+%f "
      ZSH_THEME_GIT_PROMPT_MODIFIED="%F{blue}mod%f "
      ZSH_THEME_GIT_PROMPT_DELETED="%F{red}x%f "
      ZSH_THEME_GIT_PROMPT_RENAMED="%F{magenta}rname%f "
      ZSH_THEME_GIT_PROMPT_UNMERGED="%F{yellow}═%f "
      ZSH_THEME_GIT_PROMPT_UNTRACKED="%F{white}untrk%f "
      ZSH_THEME_GIT_PROMPT_STASHED="%B%F{red}stsh%f%b "
      ZSH_THEME_GIT_PROMPT_BEHIND="%B%F{red}bhnd%f%b "
      ZSH_THEME_GIT_PROMPT_AHEAD="%B%F{green}ahd%f%b "

      prompt_git_branch
      RPROMPT='$(prompt_git_info) $(git_prompt_status)'
      PROMPT=$'%F{white}%~ %B%F{blue}>%f%b '
  }

  prompt_purification_setup
#+end_src


